- Basic usae case for messaging system:
  a. in older days one serveice can expose api for other applications to consume data/logic
  b. what if source app is down, also if one of the target application want to use another protocol of cummincation
  c. bolth above issue is solved by messaging system, it helps in logical decoupling of target and source so even if target is done message can be read
	-> we can read message in target can use it accordingly like saving in d.b or file system
	-> also now the communication proptocl is same for all soruce and target whihc is AMQP or broker provider mq protocol

Rabbit mq:
- Open source messagin system
- can use commercail/cloud based for production scenarios
- highly scalable and high throughput queues that can be processed later by target
- even we can cluster multiple instances of rabbit mq for high availability
- it comes with admin console which is nmissing in a lot of other mq like kafka, redis etc
	-> monitoring of live environment (how many queus, target ,soruce etc)
	-> user bases access role can be done using managmenet console

Steps to dwonload and run rabbit:
a- install and execute erland(a language whihc is supporting execution of rabbiut)
b. install rabbit mq server and rabbit mq management exe , also chekc the version compatibility between version of erlang and rabbit mq

Elements of rabbit mq:
a. producer
b. exchange: producer commiunicate the message to exchange whih aact like a post office employee and based on excahgne type and routing key provided by producer
		excahnge will pass the data fro approioate queue
c. Queue: datat buffer where messages are stored in array buffers
d. Consumer: Consumer ares connect to queue to pick data up
e. Binding: Connection between exchange and queue is called binding
	Once producer passes data , routing key and excahnge type
	Excahnge pushes data based on the inputs to appropriate queueu/quueues and consumer takes it from there

_ Coding parts
a. If we are creating just producer app in psring boot ,it automatically creates an excahnge but od not create queue
b. If we are creating just consumern app in spring boot , it only creates queue as consumer is indepenednt of exchange
	- The queue in step a need to be created so that once code passes message to exchnage that excahnge is bound to some queue so thatn in admin console we can see it
	- The exchange in step b needs to be create and a message needs to be published to that exchange in admin console so that code consumer can fetch from queue, queue will gets auto created

- In rabbit mq all the messages are send in format of byte array byte[] like a nio or io stream byte, but rabbittempalte helps it auto convert and we can still pass
- Rabbit tempalte also helps in auto creating exchange quuee based on usage and only if it do not exist
- rabit listener spring annotation not only fetches item but also removes it, and hence if there are multiple consumers picking on same queue, if one picks it other one wont be able to pick it as its deleted

@rabbitlistner have proeprty concurrnecy meaning number of seperate threads to create ,meaning if listerner is slow then we cna compenate it with the number of different threads/concurrnecy level

- rabbit uses serialzable to tansfer java bean objects across to message excahnge and same while fetching form quuee
	- serialziation on sending bean(actualy json) and deserailziaton for recieving in listner queue
- Side effects of string format:
	lets say one bean state we wnat to pass in format : prop1:value1, prop2: value2
	, the listed must adhere to this specfic format of string and need to aprse it to create its own object whihc is too much for development
	-> to save time rabbit allow json format of datat to be passed for any object , jackson will be used in spring to convert java object to json format 
	and in listneern jackosn will convert json to java bean, this way even a lot of time is saved as dev can docus on wirint business logic
Jackson mapper convert the java bean into json format , it calls the no arg construvtor and uses set and get methods individually in serialing and deserializng

Types of exchange:
a. Default : When we do not provide any excahnge in code then it takes default exchange create in rabbit mq
	 	-< meaning queue name has to be provided as routing key and it will be one to one excahnge

b. Fanout: Basically bypasses the routiung key provided and it directly puts to all the queue bound to the excahnge provided by publisher
	-> use to generate publisher subsriber architechture, (not producer consumer)

c. direct: exchange will route to queue whihc has same binding key as the routing key provided by producer 
d. topic: we can send to multiple queue using special charachter like below:
	*: can be used to represent any single word(exact one and 0 chars are ignored)
	#: can be used to represent any number of words(o or more words )
	eg *red* as routig key then excahnge send to all the queues whose bindng key key has anycharachter and red and then any one single charachter eg: aredb , mredc etc
	#red# any routing key ocntianing red anywhere
	Generally in rabbit mq words are sperated by .
	Same rule apply in topic exchange if we give *.ram than it will accept for routing key jai.ram or sita.ram  but not for jai.sita.ram as there are more than one word seperated by .
	however #.ram accepts for .ram,sita.ram, jai.sita.ram and so on 

DLX : Dead letter exchange 
- By Default if some excpetion occurred in rabbit mq consumer than sprin reque the message itme back to the queue and in case this specific can not be handlead at all may lead to never ending loop
- Dead letter excahnge is a different exchange just like any exchange if we cna not handle any messag we shud put requee to flase in consumer so that this queue goes to another exchange
	-> this can be used send email message /sms to admin
- Also if a consumer is down for veyr long time , message will be kept in queue for loing time, we can use TTL (time to live) so that once this much time is spent it goes to dead exchange
	where admin can recive email/sms 

To make a DLX configurable
a. Crate anew Exchange woith any type
b. in the unqueuable queuu add dead letter exchange name and dead letter excahnge routing key in arguments
c. The queue will still be only connected with main excahnge
d. In code instead of throwing any random excpetion, throw amqpUnquuable exception
e. A new Queue can be created connected to dead letter xcahnge and in consumer of that DLX excahnge we can have code to send email notifaction toa dmin so that he can check the issue

The Base class Message -> represents the whoe Contnet present in rabbit mq message, it contains internal properties, ttl properties etc and also body
	-> so far we have used just the body
- Two ways to handle DLX:
a. Throw Custom AMQPRejectRequeexception
b. Make acknowledgment and rejection manual -> This will need channel class referenc- > a chanel class represent a tunnel between java/spring and rabbitmq like a connection
steps for b:
- Rabbit mq config will reamins same likse type a
- In application.properties need to set manualy rejection/acknolwegment
- Instead of throwing exception use channel body to set rejection in failture case and acknowledge in success case
- Whena consumer is not listnenig to queue then by default message will remin in qiueue forever
	-> we can set ttl and dead letter excahnge in that case ,if consumer is extemremy busy it goes to dead letter excahnge after configured ttl and another listner might be picking up from dead letter

Scearnios:
a. Consumer is dowqn: by default data will remain in quue foever admin wont know anything as no message from rabbit mq
	-> we can set ttl and then it will go to dead letter exchange and then a partical queu can listnen and send notification email to admin saying consumer is donw
b. consumer is up but message data is innvalid and cna not process: we can not do requeue as this message cna never be processed whatever time we retry
	-> so we skip the requeue mechainism using throwing amqpunqueueexception instead of thero custom excpetion so it goes to dead letter exchange an a queu can send notitiacatio  to admin
c. consumer is up but soime third party service is donw : we can not directly reject and push to dead letter excahnge
	instead we do retry n times and have some wait time in between and then if after n retry it still do not process push to dead letter excahnge -> admin is notfied using quuee

- spring provides oob retrying mechanism , if any exception occurs that specific message will be requeed after time interval and multiple time interval logic
	-> after amx retry attemp ti will go to dead letter exchange
	-> this approach saves one of temporary waiting queue/excahnge as we implemneted in previous approach
 in summary
	a. IF any message can not be handled at all then we need to throw AMQPRehectANdUNqueueException so taht no retrying happens and it goes directly to dead excahnge
	b. IF any message gives exception (any thing other than above one) then it retired and wait in between each retry

- Default message converter in spring boot is simplemessage converter -> whihc can handle string and convert it inti byte []
- for object to be transferred we need to use objectmaoper to convert ot string first and then rabbit tempate can handle
	-> same while reciveing in rabitlistenr we take string and use object mapper to convert string to java bean using deserialzation/unmarshalling
- while using jackson message converter , the message have clas whole package name, meaning in consumer the class name and package in consumer has to be same as that in producer


- sometimes we have requirement to stop the consumer for example payment service
	-> however the producer should keep on pushing payment data in queue, only the consumer should stop the processing of queue message during certian hours of the day
	-> we can use scheuduler and during those time we can stop the queues and during another scdeuld time we can start the queus
	-> spring rabbit dedpendnecy provides bean to do it

- prefetch value it the number of queuue mesage takes out from rabbit mq queue and put into @rabbitlisterne queu
	-> this is important like a buffere stream , instead of one by one taking queues items, we can take items in bulk assing to one consumer listner
	maybe consumer is taking time to process them as it will do processing and acknowledgement of queue message one by one only
	-> we can however use concurrency to acheive
- default prefetch value is 250 , meaning if there are 250 messages and 2 consumers are running one consumer will pick and assing all 250 to iself
	meaning other consumer will reamin idle as prefect is alrrady done by other consumer/listner , hwihc acnkowleges one by one
- prefetch should be 1 for each consumer in case consumer are very slow whihc will ensure if we spawna  new consumer then it can pick the qmessage from rabbittmq
- If a consumer is very fast we can set higher prefect value , however for consumer taht are very slwo ideally prefect vlaue shiudl le less like 1(only one is moved out of mq and 499 availble for ready)
	or a bteer will be prefeth  = numberof avergae quuee messages / average consumers threads -> in pour case we have 4 consumers
	aso it will be 500/4 -> 125 -> this will makje sure none of the consumer is blocked 

- Since Data transfer in rabbit mq happens in form of byte array, we can have two differnet message entiteis present in same queue
	-> we need to create two listner mapped to same queue but each method can have different entities
/	/other approach could be two use two different routing key for each and binding can help us to push to diferent queue 

- If we have same queue for all the emthod listenrss instead of writing it on emthod level we cna keep on class level
-> also all the listner methods we need to mark @rabbitHAdnmler as  a class can have method for listnering as well as local methods 
- >we can even set a deafult method for this rabitHAndler method


---- Consistent hashing type of excahnge---------
- We need consisten hashing technique of excahnge to support correct ordering of message to a queue
	-> lets say we have single queue for multiple message , order creation .order placement, orde rpayment
	the sequence of these stpes are importantn, if lets say we have 2 queuue
	 one for handling order one for handling order placement, if order creation way too much time and orde placemnet is sucesful , the sequnce of wrong order may cause data inconsistency
- for this we need to follow below steps:
a. enable consistne hashing exchange
b. create such exchange and bind it two queues , routing key we will put ration of dicision
	eg if binding key is 10 for q1 and 20 for q2 q2 will have twice number of items/messages
	while sending the message using rabbit template, we can keep order id as same for both order creationa nd placemnet message whihc hasesh to same queue and hence 
	two different message of same orde rid will go to same queue
- consitent hash excahnge will hev routing key only as int(stirng not allowed)
	-> if exchnage is hash one then routing key put in rabbit tempalte wil be hashed and based on propbaility it will go to that queuue
	if same routing key is used for any other object it will still go to same old queue and henc eordering is amnitained
- in short we use we use conistent hash excahnge to ensure differmnt event message for same order/invoide goes to same queue so that it process in proepr sequence 
	and do not have any data inconsistency

- Also a consumer cna still act as a producer,
	for example in saga patter if exception occurs we need to call roll back message queue
-> Also in saga we push event to another message queue, and for this we cna use rabbit tempalte, but spring have create specifi reply mechanism
	-> this makes us writ eless code in @rabbitHandler
- Basic usae case for messaging system:
  a. in older days one serveice can expose api for other applications to consume data/logic
  b. what if source app is down, also if one of the target application want to use another protocol of cummincation
  c. bolth above issue is solved by messaging system, it helps in logical decoupling of target and source so even if target is done message can be read
	-> we can read message in target can use it accordingly like saving in d.b or file system
	-> also now the communication proptocl is same for all soruce and target whihc is AMQP or broker provider mq protocol

Rabbit mq:
- Open source messagin system
- can use commercail/cloud based for production scenarios
- highly scalable and high throughput queues that can be processed later by target
- even we can cluster multiple instances of rabbit mq for high availability
- it comes with admin console which is nmissing in a lot of other mq like kafka, redis etc
	-> monitoring of live environment (how many queus, target ,soruce etc)
	-> user bases access role can be done using managmenet console

Steps to dwonload and run rabbit:
a- install and execute erland(a language whihc is supporting execution of rabbiut)
b. install rabbit mq server and rabbit mq management exe , also chekc the version compatibility between version of erlang and rabbit mq

Elements of rabbit mq:
a. producer
b. exchange: producer commiunicate the message to exchange whih aact like a post office employee and based on excahgne type and routing key provided by producer
		excahnge will pass the data fro approioate queue
c. Queue: datat buffer where messages are stored in array buffers
d. Consumer: Consumer ares connect to queue to pick data up
e. Binding: Connection between exchange and queue is called binding
	Once producer passes data , routing key and excahnge type
	Excahnge pushes data based on the inputs to appropriate queueu/quueues and consumer takes it from there

_ Coding parts
a. If we are creating just producer app in psring boot ,it automatically creates an excahnge but od not create queue
b. If we are creating just consumern app in spring boot , it only creates queue as consumer is indepenednt of exchange
	- The queue in step a need to be created so that once code passes message to exchnage that excahnge is bound to some queue so thatn in admin console we can see it
	- The exchange in step b needs to be create and a message needs to be published to that exchange in admin console so that code consumer can fetch from queue, queue will gets auto created

- In rabbit mq all the messages are send in format of byte array byte[] like a nio or io stream byte, but rabbittempalte helps it auto convert and we can still pass
- Rabbit tempalte also helps in auto creating exchange quuee based on usage and only if it do not exist
- rabit listener spring annotation not only fetches item but also removes it, and hence if there are multiple consumers picking on same queue, if one picks it other one wont be able to pick it as its deleted

@rabbitlistner have proeprty concurrnecy meaning number of seperate threads to create ,meaning if listerner is slow then we cna compenate it with the number of different threads/concurrnecy level

- rabbit uses serialzable to tansfer java bean objects across to message excahnge and same while fetching form quuee
	- serialziation on sending bean(actualy json) and deserailziaton for recieving in listner queue
- Side effects of string format:
	lets say one bean state we wnat to pass in format : prop1:value1, prop2: value2
	, the listed must adhere to this specfic format of string and need to aprse it to create its own object whihc is too much for development
	-> to save time rabbit allow json format of datat to be passed for any object , jackson will be used in spring to convert java object to json format 
	and in listneern jackosn will convert json to java bean, this way even a lot of time is saved as dev can docus on wirint business logic
Jackson mapper convert the java bean into json format , it calls the no arg construvtor and uses set and get methods individually in serialing and deserializng

Types of exchange:
a. Default : When we do not provide any excahnge in code then it takes default exchange create in rabbit mq
	 	-< meaning queue name has to be provided as routing key and it will be one to one excahnge

b. Fanout: Basically bypasses the routiung key provided and it directly puts to all the queue bound to the excahnge provided by publisher
	-> use to generate publisher subsriber architechture, (not producer consumer)